/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ProductAddOn as PrismaProductAddOn } from "@prisma/client";

export class ProductAddOnServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProductAddOnCountArgs, "select">
  ): Promise<number> {
    return this.prisma.productAddOn.count(args);
  }

  async productAddOns<T extends Prisma.ProductAddOnFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductAddOnFindManyArgs>
  ): Promise<PrismaProductAddOn[]> {
    return this.prisma.productAddOn.findMany<Prisma.ProductAddOnFindManyArgs>(
      args
    );
  }
  async productAddOn<T extends Prisma.ProductAddOnFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductAddOnFindUniqueArgs>
  ): Promise<PrismaProductAddOn | null> {
    return this.prisma.productAddOn.findUnique(args);
  }
  async createProductAddOn<T extends Prisma.ProductAddOnCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductAddOnCreateArgs>
  ): Promise<PrismaProductAddOn> {
    return this.prisma.productAddOn.create<T>(args);
  }
  async updateProductAddOn<T extends Prisma.ProductAddOnUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductAddOnUpdateArgs>
  ): Promise<PrismaProductAddOn> {
    return this.prisma.productAddOn.update<T>(args);
  }
  async deleteProductAddOn<T extends Prisma.ProductAddOnDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductAddOnDeleteArgs>
  ): Promise<PrismaProductAddOn> {
    return this.prisma.productAddOn.delete(args);
  }
}
