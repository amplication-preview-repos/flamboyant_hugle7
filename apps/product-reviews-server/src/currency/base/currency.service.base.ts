/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Currency as PrismaCurrency,
  Order as PrismaOrder,
  Product as PrismaProduct,
} from "@prisma/client";

export class CurrencyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CurrencyCountArgs, "select">): Promise<number> {
    return this.prisma.currency.count(args);
  }

  async currencies<T extends Prisma.CurrencyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CurrencyFindManyArgs>
  ): Promise<PrismaCurrency[]> {
    return this.prisma.currency.findMany<Prisma.CurrencyFindManyArgs>(args);
  }
  async currency<T extends Prisma.CurrencyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CurrencyFindUniqueArgs>
  ): Promise<PrismaCurrency | null> {
    return this.prisma.currency.findUnique(args);
  }
  async createCurrency<T extends Prisma.CurrencyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CurrencyCreateArgs>
  ): Promise<PrismaCurrency> {
    return this.prisma.currency.create<T>(args);
  }
  async updateCurrency<T extends Prisma.CurrencyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CurrencyUpdateArgs>
  ): Promise<PrismaCurrency> {
    return this.prisma.currency.update<T>(args);
  }
  async deleteCurrency<T extends Prisma.CurrencyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CurrencyDeleteArgs>
  ): Promise<PrismaCurrency> {
    return this.prisma.currency.delete(args);
  }

  async getOrder(parentId: string): Promise<PrismaOrder | null> {
    return this.prisma.currency
      .findUnique({
        where: { id: parentId },
      })
      .order();
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.currency
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }
}
